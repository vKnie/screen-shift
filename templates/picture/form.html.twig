{% extends 'base.html.twig' %}
{% block body %}
    <h1>{{ edit is defined ? 'Modifier une image' : 'Cr√©er une image' }}</h1>
    <hr>
   
    {% for message in app.flashes('success') %}
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    {% endfor %}
   
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    {% endfor %}
   
    {{ form_start(form) }}
        <div class="mb-3">
            {{ form_label(form.delay) }}
            {{ form_widget(form.delay, {'attr': {'class': 'form-control'}}) }}
            {{ form_errors(form.delay) }}
        </div>
        
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    {{ form_label(form.startDate) }}
                    {{ form_widget(form.startDate, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.startDate) }}
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    {{ form_label(form.endDate) }}
                    {{ form_widget(form.endDate, {'attr': {'class': 'form-control'}}) }}
                    {{ form_errors(form.endDate) }}
                </div>
            </div>
        </div>
        
        <div class="mb-3">
            {{ form_label(form.imageFile) }}
            {{ form_widget(form.imageFile, {'attr': {'class': 'form-control custom-image-upload', 'accept': 'image/*'}}) }}
            {{ form_errors(form.imageFile) }}
        </div>

        <div id="preview-color-section" style="display: none;">
            <!-- Pr√©visualisation -->
            <div class="mb-4">
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">Pr√©visualisation</h6>
                    </div>
                    <div class="card-body text-center">
                        <div id="preview-background" class="p-4 rounded border" style="background-color: #f8f9fa; transition: background-color 0.3s ease;">
                            <img id="preview-img" src="" alt="Pr√©visualisation" class="img-fluid rounded shadow-sm" style="max-height: 200px;">
                        </div>
                        <div id="image-analysis" class="mt-2">
                            <small class="text-muted">Analyse des couleurs...</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Couleur de fond -->
            <div class="mb-4">
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">Couleur de fond</h6>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            {{ form_label(form.backgroundColor) }}
                            <div class="d-flex align-items-center gap-2">
                                {{ form_widget(form.backgroundColor, {'attr': {'class': 'custom-color-picker form-control-color'}}) }}
                                <code id="color-value" class="badge bg-light text-dark border">#ffffff</code>
                            </div>
                            {{ form_errors(form.backgroundColor) }}
                        </div>
                        
                        <div id="color-suggestions-container" style="display: none;">
                            <h6 class="mb-3">Suggestions intelligentes</h6>
                            <div id="color-suggestions" class="row g-2 mb-3">
                            </div>
                            <button type="button" id="suggest-color" class="btn btn-outline-primary btn-sm">
                                üîÑ Nouvelles suggestions
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="mb-3">
            {{ form_label(form.screenPicture) }}
            {{ form_widget(form.screenPicture, {'attr': {'class': 'form-select'}}) }}
            {{ form_errors(form.screenPicture) }}
        </div>
        
        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary">
                {{ edit is defined ? 'Mettre √† jour' : 'Cr√©er' }}
            </button>
            <a href="{{ path('app_picture') }}" class="btn btn-secondary">Retour</a>
        </div>
    {{ form_end(form) }}

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const imageUpload = document.querySelector('.custom-image-upload');
            const colorPicker = document.querySelector('.custom-color-picker');
            const suggestButton = document.getElementById('suggest-color');
            const colorSuggestions = document.getElementById('color-suggestions');
            const colorSuggestionsContainer = document.getElementById('color-suggestions-container');
            const previewSection = document.getElementById('preview-color-section');
            const previewImg = document.getElementById('preview-img');
            const previewBackground = document.getElementById('preview-background');
            const colorValue = document.getElementById('color-value');
            
            if (!imageUpload || !colorPicker) {
                console.error('√âl√©ments requis non trouv√©s');
                return;
            }
            
            let currentImageColors = [];

            function updateColorDisplay(color) {
                if (previewBackground) {
                    previewBackground.style.backgroundColor = color;
                }
                if (colorValue) {
                    colorValue.textContent = color.toUpperCase();
                }
            }

            colorPicker.addEventListener('input', function(e) {
                updateColorDisplay(e.target.value);
            });

            imageUpload.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file && file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        previewImg.src = e.target.result;
                        previewSection.style.display = 'block';
                        analyzeImageColors(e.target.result);
                    };
                    reader.readAsDataURL(file);
                } else {
                    previewSection.style.display = 'none';
                    hideSuggestions();
                }
            });

            function analyzeImageColors(imageSrc) {
                const img = new Image();
                img.onload = function() {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    
                    const maxSize = 150;
                    const scale = Math.min(maxSize / img.width, maxSize / img.height);
                    canvas.width = img.width * scale;
                    canvas.height = img.height * scale;
                    
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                    const colors = extractAdvancedColors(imageData);
                    currentImageColors = generateSmartSuggestions(colors);
                    showColorSuggestions(currentImageColors);
                };
                img.src = imageSrc;
            }

            function extractAdvancedColors(imageData) {
                const data = imageData.data;
                const colorMap = new Map();
                
                for (let i = 0; i < data.length; i += 12) {
                    const r = data[i];
                    const g = data[i + 1];
                    const b = data[i + 2];
                    const a = data[i + 3];
                    
                    if (a < 128) continue;
                    
                    const qr = Math.round(r / 8) * 8;
                    const qg = Math.round(g / 8) * 8;
                    const qb = Math.round(b / 8) * 8;
                    
                    const key = `${qr},${qg},${qb}`;
                    const current = colorMap.get(key) || { count: 0, r: qr, g: qg, b: qb };
                    current.count++;
                    colorMap.set(key, current);
                }
                
                return Array.from(colorMap.values())
                    .sort((a, b) => b.count - a.count)
                    .filter(color => {
                        const brightness = (color.r + color.g + color.b) / 3;
                        return brightness > 30 && brightness < 220;
                    })
                    .slice(0, 5);
            }

            function generateSmartSuggestions(dominantColors) {
                const suggestions = [];
                
                if (dominantColors.length === 0) {
                    return suggestions;
                }
                
                dominantColors.forEach((color, index) => {
                    const hsl = rgbToHsl(color.r, color.g, color.b);
                    
                    const complementaryHue = (hsl.h + 180) % 360;
                    suggestions.push({
                        ...hslToRgb(complementaryHue, Math.max(25, hsl.s * 0.8), Math.max(20, 85 - hsl.l)),
                        name: `Compl√©mentaire ${index + 1}`
                    });
                    
                    suggestions.push({
                        ...hslToRgb((hsl.h + 45) % 360, Math.max(30, hsl.s * 0.9), Math.max(15, hsl.l - 35)),
                        name: `Analogue chaude ${index + 1}`
                    });
                    
                    suggestions.push({
                        ...hslToRgb((hsl.h - 45 + 360) % 360, Math.max(30, hsl.s * 0.9), Math.max(15, hsl.l - 35)),
                        name: `Analogue froide ${index + 1}`
                    });
                    
                    suggestions.push({
                        ...hslToRgb(hsl.h, Math.min(100, hsl.s * 1.3), Math.max(8, hsl.l * 0.25)),
                        name: `Sombre ${index + 1}`
                    });
                    
                    suggestions.push({
                        ...hslToRgb(hsl.h, Math.max(20, hsl.s * 0.4), Math.min(90, hsl.l + 25)),
                        name: `D√©satur√© ${index + 1}`
                    });
                    
                    suggestions.push({
                        ...hslToRgb((hsl.h + 120) % 360, Math.max(25, hsl.s * 0.7), Math.max(20, hsl.l - 20)),
                        name: `Triadique ${index + 1}`
                    });
                });
                
                const uniqueSuggestions = suggestions.filter((suggestion, index, self) => {
                    const brightness = (suggestion.r + suggestion.g + suggestion.b) / 3;
                    const saturation = Math.max(suggestion.r, suggestion.g, suggestion.b) - Math.min(suggestion.r, suggestion.g, suggestion.b);
                    
                    if (brightness > 240 || brightness < 20 || saturation < 20) {
                        return false;
                    }
                    
                    return index === self.findIndex(s => 
                        Math.abs(s.r - suggestion.r) < 20 && 
                        Math.abs(s.g - suggestion.g) < 20 && 
                        Math.abs(s.b - suggestion.b) < 20
                    );
                });
                
                return uniqueSuggestions
                    .map(color => ({
                        ...color,
                        hex: rgbToHex(color.r, color.g, color.b)
                    }))
                    .slice(0, 12);
            }

            function showColorSuggestions(suggestions) {
                colorSuggestions.innerHTML = '';
                
                suggestions.forEach((color, index) => {
                    const col = document.createElement('div');
                    col.className = 'col-3';
                    
                    const colorBox = document.createElement('div');
                    colorBox.className = 'border rounded d-flex align-items-center justify-content-center';
                    colorBox.style.cssText = `
                        background-color: ${color.hex};
                        height: 50px;
                        cursor: pointer;
                        transition: all 0.2s ease;
                        border: 2px solid #dee2e6 !important;
                    `;
                    colorBox.title = `${color.name} (${color.hex})`;
                    
                    colorBox.addEventListener('click', function() {
                        colorPicker.value = color.hex;
                        updateColorDisplay(color.hex);
                        
                        document.querySelectorAll('#color-suggestions .border').forEach(box => {
                            box.style.borderColor = '#dee2e6';
                            box.style.transform = 'scale(1)';
                        });
                        
                        this.style.borderColor = '#0d6efd';
                        this.style.transform = 'scale(1.05)';
                        
                        document.getElementById('image-analysis').innerHTML = 
                            `<small class="text-success">‚úì ${color.name} appliqu√©e</small>`;
                    });
                    
                    colorBox.addEventListener('mouseenter', function() {
                        if (this.style.borderColor !== 'rgb(13, 110, 253)') {
                            this.style.transform = 'scale(1.02)';
                            this.classList.add('shadow-sm');
                        }
                    });
                    
                    colorBox.addEventListener('mouseleave', function() {
                        if (this.style.borderColor !== 'rgb(13, 110, 253)') {
                            this.style.transform = 'scale(1)';
                            this.classList.remove('shadow-sm');
                        }
                    });
                    
                    col.appendChild(colorBox);
                    colorSuggestions.appendChild(col);
                });
                
                colorSuggestionsContainer.style.display = 'block';
                document.getElementById('image-analysis').innerHTML = 
                    `<small class="text-success">‚úì ${suggestions.length} couleurs sugg√©r√©es</small>`;
            }

            function hideSuggestions() {
                if (colorSuggestionsContainer) {
                    colorSuggestionsContainer.style.display = 'none';
                }
            }

            function rgbToHex(r, g, b) {
                r = Math.round(Math.max(0, Math.min(255, r)));
                g = Math.round(Math.max(0, Math.min(255, g)));
                b = Math.round(Math.max(0, Math.min(255, b)));
                return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
            }
            
            function rgbToHsl(r, g, b) {
                r /= 255; g /= 255; b /= 255;
                const max = Math.max(r, g, b), min = Math.min(r, g, b);
                let h, s, l = (max + min) / 2;
                
                if (max === min) {
                    h = s = 0;
                } else {
                    const d = max - min;
                    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                    switch (max) {
                        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                        case g: h = (b - r) / d + 2; break;
                        case b: h = (r - g) / d + 4; break;
                    }
                    h /= 6;
                }
                
                return { h: h * 360, s: s * 100, l: l * 100 };
            }
            
            function hslToRgb(h, s, l) {
                h = h / 360; s = s / 100; l = l / 100;
                const hue2rgb = (p, q, t) => {
                    if (t < 0) t += 1;
                    if (t > 1) t -= 1;
                    if (t < 1/6) return p + (q - p) * 6 * t;
                    if (t < 1/2) return q;
                    if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                    return p;
                };
                
                let r, g, b;
                if (s === 0) {
                    r = g = b = l;
                } else {
                    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                    const p = 2 * l - q;
                    r = hue2rgb(p, q, h + 1/3);
                    g = hue2rgb(p, q, h);
                    b = hue2rgb(p, q, h - 1/3);
                }
                
                return {
                    r: Math.round(r * 255),
                    g: Math.round(g * 255),
                    b: Math.round(b * 255)
                };
            }

            if (suggestButton) {
                suggestButton.addEventListener('click', function() {
                    if (currentImageColors.length > 0) {
                        const shuffled = [...currentImageColors].sort(() => 0.5 - Math.random());
                        showColorSuggestions(shuffled);
                    }
                });
            }
            
            updateColorDisplay(colorPicker.value);
            
            {% if edit is defined and edit %}
                {% if form.vars.data.imageName %}
                    const existingImagePath = "{{ asset('uploads/pictures/' ~ form.vars.data.imageName) }}";
                    previewImg.src = existingImagePath;
                    previewSection.style.display = 'block';
                    
                    analyzeImageColors(existingImagePath);
                    
                    {% if form.vars.data.backgroundColor %}
                        const currentBgColor = "{{ form.vars.data.backgroundColor }}";
                        updateColorDisplay(currentBgColor);
                    {% endif %}
                {% endif %}
            {% endif %}
        });
    </script>
{% endblock %}