{% extends 'base.html.twig' %}

{% block title %}{{ controller_name }}{% endblock %}

{% block body %}
    <h1><i class="bi bi-file-earmark-pdf me-2"></i>{{ controller_name }}</h1>
    <hr>
    
    <!-- Flash Messages avec auto-hide -->
    {% for type, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ type == 'error' ? 'danger' : type }} alert-dismissible fade show" role="alert" id="flash-{{ loop.parent.loop.index }}-{{ loop.index }}">
                {% if type == 'success' %}
                    <i class="bi bi-check-circle me-2"></i>
                {% elseif type == 'error' %}
                    <i class="bi bi-exclamation-triangle me-2"></i>
                {% elseif type == 'warning' %}
                    <i class="bi bi-exclamation-circle me-2"></i>
                {% elseif type == 'info' %}
                    <i class="bi bi-info-circle me-2"></i>
                {% endif %}
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}
    {% endfor %}

    <!-- Download si fichier prêt -->
    {% if app.session.get('pdf_download_ready') %}
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <i class="bi bi-check-circle me-2"></i>
                    <strong>Fichier prêt !</strong> 
                    <a href="{{ path('app_convert_pdf_download') }}" class="alert-link">Cliquez ici pour télécharger</a>
                </div>
                <div>
                    <a href="{{ path('app_convert_pdf_download') }}" class="btn btn-success btn-sm me-2" onclick="clearSession()">
                        <i class="bi bi-download me-1"></i>Télécharger
                    </a>
                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="clearDownloadSession()">
                        <i class="bi bi-x"></i> Annuler
                    </button>
                </div>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" onclick="clearDownloadSession()"></button>
        </div>
        
        <script>
            function clearSession() {
                // Le téléchargement va se lancer, on nettoie après
                setTimeout(clearDownloadSession, 1000);
            }
            
            function clearDownloadSession() {
                // Nettoyer la session côté client
                fetch('{{ path('app_convert_pdf_clear') }}', { method: 'POST' })
                    .then(() => {
                        // Recharger la page pour masquer le message
                        window.location.reload();
                    });
            }
        </script>
    {% endif %}

    <div class="row">
        <div class="col-lg-8">
            <form action="{{ path('app_convert_pdf_upload') }}" method="post" enctype="multipart/form-data" id="pdf-upload-form">
                <div class="mb-3">
                    <label for="pdf_file" class="form-label">
                        <i class="bi bi-cloud-upload me-2"></i>Sélectionner un fichier PDF
                    </label>
                    <input type="file" 
                           class="form-control" 
                           id="pdf_file" 
                           name="pdf_file" 
                           accept=".pdf" 
                           required>
                    <div class="form-text">
                        <i class="bi bi-info-circle me-1"></i>
                        Taille maximale : 10MB | Format accepté : PDF uniquement
                    </div>
                </div>

                <button type="submit" class="btn btn-success" id="convert-btn">
                    <i class="bi bi-gear me-2"></i>Convertir en PNG
                </button>
            </form>
        </div>

        <div class="col-lg-4">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0"><i class="bi bi-gear me-2"></i>Spécifications</h6>
                </div>
                <div class="card-body">
                    <ul class="list-unstyled mb-0">
                        <li><i class="bi bi-check-circle text-success me-2"></i><strong>Résolution :</strong> 150 DPI</li>
                        <li><i class="bi bi-check-circle text-success me-2"></i><strong>Format :</strong> PNG</li>
                        <li><i class="bi bi-check-circle text-success me-2"></i><strong>Livraison :</strong> ZIP</li>
                    </ul>
                    <hr>
                    <div class="text-center">
                        <a href="{{ path('app_convert_pdf_test') }}" class="btn btn-sm btn-outline-info" target="_blank">
                            <i class="bi bi-gear me-1"></i>Tester les dépendances
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Modal -->
    <div class="modal fade" id="loadingModal" tabindex="-1" aria-labelledby="loadingModalLabel" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body text-center p-4">
                    <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                    <h5>Conversion en cours...</h5>
                    <p class="text-muted">Veuillez patienter pendant la conversion de votre PDF.</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('pdf-upload-form');
            const fileInput = document.getElementById('pdf_file');
            const convertBtn = document.getElementById('convert-btn');
            const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));

            // Auto-hide des flash messages après 5 secondes
            const alerts = document.querySelectorAll('.alert[id^="flash-"]');
            alerts.forEach(function(alert) {
                setTimeout(function() {
                    if (alert && alert.classList.contains('show')) {
                        const bsAlert = new bootstrap.Alert(alert);
                        bsAlert.close();
                    }
                }, 5000);
            });

            // Validation du fichier
            fileInput.addEventListener('change', function() {
                const file = this.files[0];
                if (file) {
                    // Vérifier la taille
                    if (file.size > 10 * 1024 * 1024) {
                        showAlert('Le fichier est trop volumineux (max 10MB)', 'danger');
                        this.value = '';
                        return;
                    }

                    // Vérifier l'extension
                    const fileName = file.name.toLowerCase();
                    if (!fileName.endsWith('.pdf')) {
                        showAlert('Veuillez sélectionner un fichier PDF', 'danger');
                        this.value = '';
                        return;
                    }

                    // Afficher les informations du fichier
                    const fileSize = (file.size / 1024 / 1024).toFixed(2);
                    console.log(`Fichier sélectionné: ${file.name} (${fileSize}MB)`);
                    
                    // Optionnel : afficher une confirmation
                    showAlert(`Fichier sélectionné: ${file.name} (${fileSize}MB)`, 'info');
                }
            });

            // Soumission du formulaire
            form.addEventListener('submit', function(e) {
                const file = fileInput.files[0];
                if (!file) {
                    e.preventDefault();
                    showAlert('Veuillez sélectionner un fichier PDF', 'danger');
                    return;
                }

                // Afficher le modal de chargement
                loadingModal.show();
                
                // Désactiver le bouton
                convertBtn.disabled = true;
                convertBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Conversion...';
            });

            // Masquer le modal si la page se recharge (en cas d'erreur)
            window.addEventListener('beforeunload', function() {
                loadingModal.hide();
            });

            // Fonction pour afficher des alertes dynamiques
            function showAlert(message, type) {
                const alertContainer = document.querySelector('h1').nextElementSibling.nextElementSibling;
                const alertId = 'dynamic-alert-' + Date.now();
                
                const alertHtml = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert" id="${alertId}">
                        <i class="bi bi-${getIconForType(type)} me-2"></i>
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
                
                alertContainer.insertAdjacentHTML('afterend', alertHtml);
                
                // Auto-hide après 5 secondes
                setTimeout(function() {
                    const alert = document.getElementById(alertId);
                    if (alert && alert.classList.contains('show')) {
                        const bsAlert = new bootstrap.Alert(alert);
                        bsAlert.close();
                    }
                }, 5000);
            }

            function getIconForType(type) {
                switch(type) {
                    case 'success': return 'check-circle';
                    case 'danger': return 'exclamation-triangle';
                    case 'warning': return 'exclamation-circle';
                    case 'info': return 'info-circle';
                    default: return 'info-circle';
                }
            }
        });
    </script>
{% endblock %}